<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<filter fluentd.test.mail>
  @type grep
  <exclude>
    key subject
    pattern /SECURITY information/
  </exclude>
</filter>

<match fluentd.test.mail>
  @type copy

  <store>
    @type stdout
  </store>

  <store>
    @type http
    endpoint "#{ENV['API_BASE']}/api/v1/log_collector/post_log"
    http_method post

    <format>
      @type json
    </format>

    <buffer>
      flush_interval 5s
    </buffer>
  </store>
</match>

<match fluentd.test.webmail>
  @type copy

  <store>
    @type stdout
  </store>

  <store>
    @type http
    endpoint "#{ENV['API_BASE']}/api/v1/log_collector/post_log"
    http_method post

    <format>
      @type json
    </format>

    <buffer>
      flush_interval 5s
    </buffer>
  </store>
</match>

<match fluentd.test.http>
  @type copy

  <store>
    @type stdout
  </store>

  <store>
    @type http
    endpoint "#{ENV['API_BASE']}/api/v1/log_collector/post_log"
    http_method post
   
    <format>
      @type json
    </format>
 
    <buffer>
      flush_interval 5s
    </buffer>
  </store>
</match>

# logon/off
<source>
  @type tail
  path /host/var/log/audit/audit.log
  pos_file /var/log/td-agent/audit.pos
  tag fluentd.test.auth
  format none
</source>

<filter fluentd.test.auth>
  @type grep
  <regexp>
    key message
    pattern /type=(USER_START|USER_END).*gdm-session-worker/
  </regexp>
  <exclude>
    key message
    pattern /acct="gdm"/
  </exclude>
</filter>

<filter fluentd.test.auth>
  @type parser
  key_name message
  reserve_data false
  <parse>
    @type regexp
    expression /^type=(?<event_type>USER_START|USER_END).*?audit\((?<timestamp>[\d.]+):\d+\).*?acct="(?<user_id>[^"]+)".*?exe="(?<exe>[^"]+)"/
    time_key timestamp
    time_type float
    time_format %s
    timezone Asia/Seoul
  </parse>
</filter>

<filter fluentd.test.auth>
  @type record_transformer
  enable_ruby true
  <record>
    employee_id ${ (record["employee_id"].to_s.strip.empty? || record["employee_id"] == "root") ? ENV['EMPLOYEE_ID'] : record["employee_id"] }
    pc_id ${ENV['PC_ID'] || Socket.gethostname}
    timestamp ${time.strftime('%Y-%m-%dT%H:%M:%S')}
    event_type "logon"
    activity ${record["event_type"] == "USER_START" ? "logon" : "logoff"}
  </record>
  remove_keys msg,pid,uid,exe,user_id
</filter>

<match fluentd.test.auth>
  @type copy
  <store>
    @type stdout
  </store>

  <store>
    @type http
    endpoint "#{ENV['API_BASE']}/api/v1/log_collector/post_log"
    http_method post

    <format>
      @type json
    </format>

    <buffer>
      flush_interval 5s
    </buffer>
  </store>
</match>

# device
<source>
  @type tail
  path /host/var/log/audit/audit.log
  pos_file /var/log/td-agent/usb.pos
  tag fluentd.test.device
  format none
  read_from_head false
</source>

<filter fluentd.test.device>
  @type grep
  <regexp>
    key message
    pattern /type=SYSCALL\b/
  </regexp>
</filter>

<filter fluentd.test.device>
  @type grep
  <regexp>
    key message
    pattern /key="usb_mount"|key="usb_umount"/
  </regexp>
</filter>

<filter fluentd.test.device>
  @type grep
  <exclude>
    key message
    pattern /exe="\/usr\/lib\/systemd\/systemd"/
  </exclude>
</filter>

<filter fluentd.test.device>
  @type grep
  <exclude>
    key message
    pattern /comm="\(?(?:dockerd|containerd|runc(?:\:\[\d+:INIT\])?|fusermount3|gvfsd-fuse|auditctl|systemd(?:-user-runtime-dir|-localed|-hostnamed|-timedated)?|geoclue|fprintd|fwupdmgr)\)?"/
  </exclude>
</filter>

<filter fluentd.test.device>
  @type grep
  <exclude>
    key message
    pattern /success=no/
  </exclude>
</filter>

<filter fluentd.test.device>
  @type record_transformer
  enable_ruby true
  <record>
    employee_id ${ (record["employee_id"].to_s.strip.empty? || record["employee_id"] == "root") ? ENV['EMPLOYEE_ID'] : record["employee_id"] }
    pc_id ${ENV['PC_ID'] || Socket.gethostname}
    timestamp ${time.strftime('%Y-%m-%dT%H:%M:%S')}
    event_type "device"
    activity ${record["message"].include?('key="usb_mount"') ? 'connect' : 'disconnect'}
  </record>
  remove_keys message
</filter>

<match fluentd.test.device>
  @type copy

  <store>
    @type stdout
  </store>

  <store>
    @type http
    endpoint "#{ENV['API_BASE']}/api/v1/log_collector/post_log"
    http_method post

    <format>
      @type json
    </format>

    <buffer>
      flush_interval 5s
    </buffer>
  </store>
</match>

# file copy
<source>
  @type tail
  path /host/var/log/audit/audit.log
  pos_file /var/log/td-agent/copy.pos
  tag fluentd.test.copy
  <parse>
    @type multiline
    format_firstline /^(type=SYSCALL|type=PROCTITLE) /
    format1 /^(?<message>.*)$/
  </parse>
  read_from_head false
</source>

<filter fluentd.test.copy>
  @type grep
  <regexp>
    key message
    pattern /key="?usb_copy_watch"?/
  </regexp>
</filter>

<filter fluentd.test.copy>
  @type grep
  <regexp>
    key message
    pattern /comm="?cp"?/
  </regexp>
</filter>

<filter fluentd.test.copy>
  @type grep
  <regexp>
    key message
    pattern /type=PATH [^\n]* nametype=(CREATE|NORMAL)/
  </regexp>
</filter>

<filter fluentd.test.copy>
  @type record_transformer
  enable_ruby true
  <record>
    employee_id ${ (record["employee_id"].to_s.strip.empty? || record["employee_id"] == "root") ? ENV['EMPLOYEE_ID'] : record["employee_id"] }
    pc_id ${ENV['PC_ID'] || Socket.gethostname}
    timestamp ${time.strftime('%Y-%m-%dT%H:%M:%S')}
    event_type "file"
    filepath ${ m=record['message']||''; p=m[/type=PATH [^\n]* name="?([^"\n]+)"?[^\n]* nametype=(?:CREATE|NORMAL)/,1]; if p && p[0]!='/'; cwd=(m[/type=CWD [^\n]* cwd="?([^"\s]+)"?/,1]||''); p=cwd.empty? ? p : File.join(cwd,p); end; p }
    filename ${ m=record['message']||''; p=m[/type=PATH [^\n]* name="?([^"\n]+)"?[^\n]* nametype=(?:CREATE|NORMAL)/,1]; if p && p[0]!='/'; cwd=(m[/type=CWD [^\n]* cwd="?([^"\s]+)"?/,1]||''); p=cwd.empty? ? p : File.join(cwd,p); end; p ? File.basename(p) : nil }
  </record>
  remove_keys message
</filter>

<filter fluentd.test.copy>
  @type grep
  <regexp>
    key filepath
    pattern ^/media/
  </regexp>
</filter>

<match fluentd.test.copy>
  @type copy

  <store>
    @type stdout
  </store>

  <store>
    @type http
    endpoint "#{ENV['API_BASE']}/api/v1/log_collector/post_log"
    http_method post
    
    <format>
      @type json
    </format>

    <buffer>
      flush_interval 5s
    </buffer>
  </store>
</match>
